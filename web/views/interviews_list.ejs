<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Interview Management - <%= app.username %></title>
  <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
  <header class="navbar">
    <div class="nav-left">
      <a href="/applications">Applications</a>
      <a href="/applications/<%= app.id %>">‚Üê Back to Application</a>
    </div>
    <div class="nav-right"><a class="btn" href="/logout">Logout</a></div>
  </header>
  <main class="container">
    <h1>Interview Management: <%= app.username %></h1>
    <p class="muted">Application Type: <%= app.type %> ‚Ä¢ Current Stage: <%= app.stage %></p>
    
         <section>
       <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
         <h3>Scheduled Interviews</h3>
         <form method="post" action="/applications/<%= app.id %>/interviews/cleanup" style="display: inline;">
           <button class="btn" type="submit" onclick="return confirm('Clean up all old interview records? This will remove completed, error, and skipped interviews.')">
             üßπ Cleanup Old Records
           </button>
         </form>
       </div>
       <% if (schedules.length === 0) { %>
         <p class="muted">No interviews scheduled for this application.</p>
       <% } else { %>
        <div class="interviews-list">
                     <% schedules.forEach(schedule => { %>
             <div class="interview-card" data-job-id="<%= schedule.jobId %>" data-utc-time="<%= schedule.utcTime %>" data-iso-time="<%= schedule.isoTime %>">
              <div class="interview-info">
                <h4>Interview #<%= schedule.jobId %></h4>
                                 <p><strong>Date & Time:</strong> <span class="dt" data-iso-time="<%= schedule.isoTime %>"><%= schedule.localTime %></span> (Your Local Time)</p>
                <p><strong>Staff Member:</strong> <code><%= schedule.staffId %></code></p>
                <p><strong>Status:</strong> 
                  <span class="status-badge <%= schedule.status %>">
                    <%= schedule.status.charAt(0).toUpperCase() + schedule.status.slice(1) %>
                  </span>
                </p>
                <% if (schedule.info && schedule.info.channelId) { %>
                  <p><strong>Voice Channel:</strong> <code>#<%= schedule.info.channelId %></code></p>
                <% } %>
              </div>
                             <div class="interview-actions">
                 <% if (schedule.status === 'scheduled') { %>
                   <button class="btn" onclick="showRescheduleForm('<%= schedule.jobId %>', '<%= schedule.localTime %>', '<%= schedule.staffId %>')">
                     Reschedule
                   </button>
                   <form method="post" action="/applications/<%= app.id %>/interviews/<%= schedule.jobId %>/delete" style="display:inline;">
                     <button class="btn" type="submit" onclick="return confirm('Are you sure you want to cancel this interview?')">
                       Cancel
                     </button>
                   </form>
                 <% } else if (schedule.status === 'done') { %>
                   <span class="muted">Interview completed</span>
                 <% } else if (schedule.status === 'error') { %>
                   <div class="error-actions">
                     <span class="error">Error: <%= schedule.error || 'Unknown error' %></span>
                     <form method="post" action="/applications/<%= app.id %>/interviews/<%= schedule.jobId %>/skip" style="display:inline;">
                       <button class="btn" type="submit" onclick="return confirm('Mark this failed interview as skipped?')">
                         Skip Error
                       </button>
                     </form>
                   </div>
                 <% } else if (schedule.status === 'skipped') { %>
                   <span class="muted">Interview skipped</span>
                 <% } %>
               </div>
            </div>
          <% }); %>
        </div>
      <% } %>
    </section>
    
         <section style="margin-top: 24px;">
       <h3>Schedule New Interview</h3>
       <p class="muted" style="margin-bottom: 12px;">All times are in your local timezone and will be automatically converted to UTC for scheduling.</p>
       <form method="post" action="/applications/<%= app.id %>/schedule" style="display:flex; gap:8px; align-items:center; flex-wrap: wrap;">
         <div style="display:flex; gap:8px; align-items:center;">
           <label>Interview time: <input type="datetime-local" name="when" required></label>
           <label>Staff ID: <input type="text" name="staff_id" placeholder="Discord Staff ID" required></label>
         </div>
         <input type="hidden" name="when_utc" value="">
         <button class="btn primary" type="submit">Schedule Interview</button>
       </form>
     </section>
  </main>
  
  <!-- Reschedule Modal -->
  <div id="rescheduleModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Reschedule Interview</h2>
        <span class="close" onclick="closeRescheduleModal()">&times;</span>
      </div>
      <div class="modal-body">
        <form id="rescheduleForm" method="post">
          <div style="margin-bottom: 16px;">
            <label>Interview time: <input type="datetime-local" name="when" required></label>
          </div>
          <div style="margin-bottom: 16px;">
            <label>Staff ID: <input type="text" name="staff_id" placeholder="Discord Staff ID" required></label>
          </div>
          <input type="hidden" name="when_utc" value="">
          <div style="text-align: right;">
            <button type="button" class="btn" onclick="closeRescheduleModal()">Cancel</button>
            <button type="submit" class="btn primary">Reschedule</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    // Render local times from ISO timestamps
    (function() {
      const nodes = document.querySelectorAll('.dt[data-iso-time]');
      nodes.forEach(n => {
        try {
          const iso = n.getAttribute('data-iso-time');
          if (!iso) return;
          const d = new Date(iso);
          n.textContent = d.toLocaleString(undefined, {
            weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',
            hour: '2-digit', minute: '2-digit', timeZoneName: 'short'
          });
        } catch (_) {}
      });
    })();

    // Form validation for interview scheduling
    const interviewForm = document.querySelector('form[action*="/schedule"]');
    if (interviewForm) {
      interviewForm.addEventListener('submit', function(e) {
        const when = this.querySelector('input[name="when"]').value;
        const staffId = this.querySelector('input[name="staff_id"]').value;
        
        if (!when || !staffId) {
          e.preventDefault();
          alert('Please fill in both interview time and staff ID.');
          return false;
        }
        
        // Validate staff ID format (Discord IDs are 17-19 digits)
        if (!/^\d{17,19}$/.test(staffId)) {
          e.preventDefault();
          alert('Please enter a valid Discord Staff ID (17-19 digits).');
          return false;
        }
        
        // Validate interview time is in the future
        const interviewTime = new Date(when);
        const now = new Date();
        
        if (interviewTime <= now) {
          e.preventDefault();
          alert('Interview time must be in the future.');
          return false;
        }
        
        

        // Provide UTC explicitly to the server
        const whenUtcInput = this.querySelector('input[name="when_utc"]');
        if (whenUtcInput) {
          whenUtcInput.value = new Date(when).toISOString();
        }
      });
    }

    // Reschedule form: provide UTC explicitly
    (function(){
      const resForm = document.getElementById('rescheduleForm');
      if (!resForm) return;
      resForm.addEventListener('submit', function() {
        const when = this.querySelector('input[name="when"]').value;
        const whenUtcInput = this.querySelector('input[name="when_utc"]');
        if (when && whenUtcInput) {
          whenUtcInput.value = new Date(when).toISOString();
        }
      });
    })();
    
         // Reschedule modal functions
     function showRescheduleForm(jobId, currentTime, currentStaffId) {
       const modal = document.getElementById('rescheduleModal');
       const form = document.getElementById('rescheduleForm');
       
       // Set the form action
       form.action = `/applications/<%= app.id %>/interviews/${jobId}/reschedule`;
       
       // Find the schedule data to get the proper UTC time
       const scheduleCard = document.querySelector(`[data-job-id="${jobId}"]`);
       const utcTime = scheduleCard ? scheduleCard.dataset.utcTime : null;
       
       if (utcTime) {
         // Convert UTC time to local datetime-local format
         const utcDateTime = new Date(utcTime);
         const localDateTime = new Date(utcDateTime.getTime() - (utcDateTime.getTimezoneOffset() * 60000));
         const localDateTimeString = localDateTime.toISOString().slice(0, 16);
         
         // Set current values
         form.querySelector('input[name="when"]').value = localDateTimeString;
       } else {
         // Fallback to the old method if data attribute is not available
         const currentDateTime = new Date(currentTime);
         const localDateTime = new Date(currentDateTime.getTime() - (currentDateTime.getTimezoneOffset() * 60000));
         const localDateTimeString = localDateTime.toISOString().slice(0, 16);
         form.querySelector('input[name="when"]').value = localDateTimeString;
       }
       
       form.querySelector('input[name="staff_id"]').value = currentStaffId;
       
       modal.style.display = 'block';
       document.body.style.overflow = 'hidden';
     }
    
    function closeRescheduleModal() {
      const modal = document.getElementById('rescheduleModal');
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
    }
    
    // Close modal when clicking outside of it
    window.onclick = function(event) {
      const modal = document.getElementById('rescheduleModal');
      if (event.target === modal) {
        closeRescheduleModal();
      }
    }
  </script>
</body>
</html>
